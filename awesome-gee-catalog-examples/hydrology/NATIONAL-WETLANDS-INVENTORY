/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var wetlands = ee.FeatureCollection("projects/sat-io/open-datasets/NWI/wetlands/FL_Wetlands"),
    historic_wetland = ee.FeatureCollection("projects/sat-io/open-datasets/NWI/historic_wetlands/FL_Historic_Wetlands"),
    historic_wetland_project_metadata = ee.FeatureCollection("projects/sat-io/open-datasets/NWI/hwpm/FL_Historic_Wetlands_Project_Metadata"),
    historic_map_info = ee.FeatureCollection("projects/sat-io/open-datasets/NWI/hmi/FL_Wetlands_Historic_Map_Info"),
    co_riparian = ee.FeatureCollection("projects/sat-io/open-datasets/NWI/riparian/CO_Riparian"),
    co_riparian_metadata = ee.FeatureCollection("projects/sat-io/open-datasets/NWI/rpm/CO_Riparian_Project_Metadata"),
    wetlands_metadata = ee.FeatureCollection("projects/sat-io/open-datasets/NWI/wpm/FL_Wetlands_Project_Metadata");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var c1 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Freshwater Forested/Shrub Wetland')).map(function(feature){return feature.set('WETLAND_CD',1).copyProperties(feature)})
var c2 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Freshwater Emergent Wetland')).map(function(feature){return feature.set('WETLAND_CD',2).copyProperties(feature)})
var c3 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Freshwater Pond')).map(function(feature){return feature.set('WETLAND_CD',3).copyProperties(feature)})
var c4 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Estuarine and Marine Wetland')).map(function(feature){return feature.set('WETLAND_CD',4).copyProperties(feature)})
var c5 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Riverine')).map(function(feature){return feature.set('WETLAND_CD',5).copyProperties(feature)})
var c6 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Lake')).map(function(feature){return feature.set('WETLAND_CD',6).copyProperties(feature)})
var c7 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Estuarine and Marine Deepwater')).map(function(feature){return feature.set('WETLAND_CD',7).copyProperties(feature)})
var c8 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Other')).map(function(feature){return feature.set('WETLAND_CD',8).copyProperties(feature)})

var empty = ee.Image().byte();
var vis = {min:1, max:8, 
palette: ['#008837','#7FC31C','#688CC0','#66C2A5','#0190BF','#13007C','#007C88','#B28653']}

var combined_collection = ee.FeatureCollection([c1,c2,c3,c4,c5,c5,c6,c7,c8]).flatten()


var wetlands_layer = combined_collection.reduceToImage(['WETLAND_CD'], ee.Reducer.mean());
Map.addLayer(wetlands_layer, vis, 'Wetland layer');


// Define a dictionary which will be used to make legend and visualize image on map
var dict = {
  "names": [
    "Freshwater Forested/Shrub Wetland",
    "Freshwater Emergent Wetland",
    "Freshwater Pond",
    "Estuarine and Marine Wetland",
    "Riverine", 
    "Lake",
    "Estuarine and Marine Deepwater",
    "Other",
  ],
  "colors": ['#008837','#7FC31C','#688CC0','#66C2A5','#0190BF','#13007C','#007C88','#B28653']};

// Create a panel to hold the legend widget
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

// Function to generate the legend
function addCategoricalLegend(panel, dict, title) {
  
  // Create and add the legend title.
  var legendTitle = ui.Label({
    value: title,
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0'
    }
  });
  panel.add(legendTitle);
  
  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});
  panel.add(loading);
  
  // Creates and styles 1 row of the legend.
  var makeRow = function(color, name) {
    // Create the label that is actually the colored box.
    var colorBox = ui.Label({
      style: {
        backgroundColor: color,
        // Use padding to give the box height and width.
        padding: '8px',
        margin: '0 0 4px 0'
      }
    });
  
    // Create the label filled with the description text.
    var description = ui.Label({
      value: name,
      style: {margin: '0 0 4px 6px'}
    });
  
    return ui.Panel({
      widgets: [colorBox, description],
      layout: ui.Panel.Layout.Flow('horizontal')
    });
  };
  
  // Get the list of palette colors and class names from the image.
  var palette = dict['colors'];
  var names = dict['names'];
  loading.style().set('shown', false);
  
  for (var i = 0; i < names.length; i++) {
    panel.add(makeRow(palette[i], names[i]));
  }
  
  Map.add(panel);
  
}

addCategoricalLegend(legend, dict, 'NWI Categorical Legend');