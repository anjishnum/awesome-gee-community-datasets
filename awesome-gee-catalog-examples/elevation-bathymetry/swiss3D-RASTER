/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var swiss3d = ee.ImageCollection("projects/sat-io/open-datasets/swissSURFACE3D");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
print('Collection size',swiss3d.size())
Map.setCenter(8.54379, 47.36675,10)

swiss3d = swiss3d.mosaic().setDefaultProjection('EPSG:3857',null,0.5)


// Use the terrain algorithms to compute a hillshade with 8-bit values.
var shade = ee.Terrain.hillshade(swiss3d);
Map.addLayer(shade, {}, 'hillshade', false);

// Create an "ocean" variable to be used for cartographic purposes
var ocean = swiss3d.lte(0);
Map.addLayer(ocean.mask(ocean), {palette:'000022'}, 'ocean', false);

// Create a custom elevation palette from hex strings.
var elevationPalette = ['006600', '002200', 'fff700', 'ab7634', 'c4d0ff', 'ffffff'];
// Use these visualization parameters, customized by location.
var visParams = {min: 1, max: 3000, palette: elevationPalette};

// Create a mosaic of the ocean and the elevation data
var visualized = ee.ImageCollection([
  // Mask the elevation to get only land
  swiss3d.mask(ocean.not()).visualize(visParams), 
  // Use the ocean mask directly to display ocean.
  ocean.mask(ocean).visualize({palette:'000022'})
]).mosaic();

// Note that the visualization image doesn't require visualization parameters.
Map.addLayer(visualized, {}, 'elev palette');